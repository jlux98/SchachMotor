package tests;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import classes.EvaluableInteger;
import classes.GeneratingIntNode;
import data.IntNodeTestTree;
import gametree.ImpTree;
import gametree.GenericAlphaBetaPruning;
import gametree.Node;
import gametree.TreeEvaluator;
import helper.IntNodeHelper;

public class AlphaBetaTest {
    private IntNodeTestTree testTree;

    @BeforeEach
    public void setUpTree() {
        this.testTree = new IntNodeTestTree();
    }

    @Test
    public void alphaBetaPruningTest() {
        TreeEvaluator<EvaluableInteger> alphaBeta = new GenericAlphaBetaPruning<EvaluableInteger>();
        alphaBeta.evaluateTree(testTree, 4, true);
        //root
        IntNodeHelper.compareIntNodeValue(-7, testTree.root);
        //layer1
        IntNodeHelper.compareIntNodeValue(-10, testTree.layer1Node0);
        IntNodeHelper.compareIntNodeValue(-7, testTree.layer1Node1);
        //layer2
        IntNodeHelper.compareIntNodeValue(10, testTree.layer2Node0);
        IntNodeHelper.compareIntNodeValue(-10, testTree.layer2Node1);
        IntNodeHelper.compareIntNodeValue(5, testTree.layer2Node2);
        IntNodeHelper.compareIntNodeValue(-7, testTree.layer2Node3);
        //layer3
        IntNodeHelper.compareIntNodeValue(10, testTree.layer3Node0);
        IntNodeHelper.compareIntNodeValue(5, testTree.layer3Node1);
        IntNodeHelper.compareIntNodeValue(-10, testTree.layer3Node2);
        IntNodeHelper.compareIntNodeValue(5, testTree.layer3Node3);
        IntNodeHelper.compareIntNodeValue(Integer.MIN_VALUE, testTree.layer3Node4);
        IntNodeHelper.compareIntNodeValue(-7, testTree.layer3Node5);
        //assure that leaf layer was not changed
        IntNodeHelper.compareIntNodeValue(10, testTree.layer4Node0);
        IntNodeHelper.compareIntNodeValue(Integer.MAX_VALUE, testTree.layer4Node1);
        IntNodeHelper.compareIntNodeValue(5, testTree.layer4Node2);
        IntNodeHelper.compareIntNodeValue(-10, testTree.layer4Node3);
        IntNodeHelper.compareIntNodeValue(7, testTree.layer4Node4);
        IntNodeHelper.compareIntNodeValue(5, testTree.layer4Node5);
        IntNodeHelper.compareIntNodeValue(Integer.MIN_VALUE, testTree.layer4Node6);
        IntNodeHelper.compareIntNodeValue(-7, testTree.layer4Node7);
        IntNodeHelper.compareIntNodeValue(-5, testTree.layer4Node8);
    }

    //the first line's whitespace within the <pre> block is trimmed ("Tree:" has to be inside <pre></pre>)
    /**
     * Tree visualized
     * (number of a node = number of children that can be generated by each node)
     * <pre>
     * Tree:
     *              3               layer0
     *      2       1       0       layer1
     *   1    0     0               layer2
     *   0                          layer3 (not generated because depth=2 is set for alpha-beta)
     * 
     * </pre>
     */
    @Test
    public void alphaBetaRespectsDepthTest() {
        GeneratingIntNode parent = new GeneratingIntNode(0, 3);
        new GenericAlphaBetaPruning<EvaluableInteger>().evaluateTree(new ImpTree<GeneratingIntNode>(parent), 2, true);
        assertTrue(parent.hasChildren());
        List<? extends Node<EvaluableInteger>> children = parent.getChildren();
        GeneratingIntNode layer1Node0 = (GeneratingIntNode) children.get(0);
        GeneratingIntNode layer1Node1 = (GeneratingIntNode) children.get(1);
        GeneratingIntNode layer1Node2 = (GeneratingIntNode) children.get(2);
        assertEquals(3, children.size());
        assertFalse(layer1Node0.hasChildren());
        assertTrue(layer1Node1.hasChildren());
        assertTrue(layer1Node2.hasChildren());
        List<? extends Node<EvaluableInteger>> layer1Node1Children = layer1Node1.getChildren();
        List<? extends Node<EvaluableInteger>> layer1Node2Children = layer1Node2.getChildren();
        assertEquals(1, layer1Node1Children.size());
        assertEquals(2, layer1Node2Children.size());
        
        //assert that no children were generated in layer 3 (layer0 = root, layer2 = leaves = alpha-beta-depth)
        //layer1Node1 only has one child
        assertFalse(layer1Node1.getChildren().get(0).hasChildren());

        //layer1Node2 has two children
        assertFalse(layer1Node2.getChildren().get(0).hasChildren());
        assertFalse(layer1Node2.getChildren().get(1).hasChildren());

    }

    //TODO add test with more extensive pruning (black)
    //TODO add test with more extensive pruning (white)
}
